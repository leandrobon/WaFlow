@page "/"
@implements IDisposable
@inject Services.IChatBackend Chat
@inject NavigationManager Nav


<div class="chat-wrap">
    <div class="header">
        <h1>WaFlow Chat</h1>
        <span class="status-pill @(_online ? "online" : "offline")">
        @(_online ? "Simulator ONLINE" : "Simulator OFFLINE — reconnecting…")
    </span>
    </div>
    <div class="chatbox">
        @foreach (var m in _feed)
        {
            var isBot = m.Direction == Models.Direction.Outbound;
            <div class="row @(isBot ? "bot" : "user")">
                <div class="bubble">
                    @m.Body
                    <div class="meta">@m.Timestamp.ToLocalTime()</div>
                </div>
            </div>
        }
    </div>

    <div class="inputrow">
        <input
            @bind="_text"
            @bind:event="oninput"
            @onkeydown="HandleKey"
            placeholder="Write a message..."
            class="textinput"/>

        <button class="btn-send"
                @onclick="Send"
                disabled="@(!_online || string.IsNullOrWhiteSpace(_text))">
            Send
        </button>
    </div>

    <div class="toolbar">
        <button class="btn-secondary" @onclick="Export" disabled="@(!_online)">
            Export (.json)
        </button>
        <button class="btn-secondary" @onclick="ResetMessages"
                disabled="@(!_online)">Reset Messages
        </button>
        @if (_online)
        {
            <label for="fileImport" class="btn-secondary"
                   disabled="@(!_online)">Import (.json)</label>
            <InputFile id="fileImport"
                       class="file-hidden"
                       OnChange="OnImportReplay"
                       accept=".json"/>
        }
        else
        {
            <span class="btn-secondary" disabled="@(!_online)">Import (.json)</span>
        }
        
    </div>

    <details class="logs">
        <summary>Logs</summary>
        <div class="logs-body">
            @foreach (var line in Enumerable.Reverse(_logs))
            {
                <div class="log-line">@line</div>
            }
        </div>
    </details>

</div>

@code{
    private string _text = string.Empty;
    private List<Models.Message> _feed = new();
    private Services.ReplayMessages? _replay;
    private string _userId = "user-001"; // fixed now, should be made dynamic
    private bool _online;
    private readonly List<string> _logs = new();

    protected override async Task OnInitializedAsync()
    {
        Chat.OnMessage += OnIncoming;
        Chat.OnlineChanged += HandleOnlineChanged;
        _online = Chat.IsOnline;

        Log("Init UI");
        await Chat.InitializeAsync();
        _feed = Chat.Feed.ToList();
        _replay = new Services.ReplayMessages(Chat);
        Log($"Initial load: {_feed.Count} messages");
    }

    private void HandleOnlineChanged(bool isOnline)
    {
        Log(isOnline ? "Simulator ONLINE" : "Simulator OFFLINE");
        _online = isOnline;
        InvokeAsync(StateHasChanged);
    }

    private async Task Send()
    {
        if (string.IsNullOrWhiteSpace(_text)) return;
        var t = _text;
        _text = string.Empty;
        Log($"Send (user): {t}");
        try
        {
            await Chat.SendFromUserAsync(t);
        }
        catch (Exception ex)
        {
            Log($"Send ERROR: {ex.Message}");
        }
    }

    private async Task ResetMessages()
    {
        Log("Reset requested");
        await Chat.ResetAsync();
        _feed.Clear();
        Log("Reset done (local cleared)");
        StateHasChanged();
    }

    private void HandleKey(KeyboardEventArgs e)
    {
        if (e.Key is "Enter") _ = Send();
    }

    private void OnIncoming(Models.Message m)
    {
        _feed.Add(m);
        Log($"Recv ({m.Direction}): {m.Body}");
        InvokeAsync(StateHasChanged);
    }

    private async Task OnImportReplay(InputFileChangeEventArgs e)
    {
        Log("Import started");
        if (_replay is null) return;
        await using var stream = e.File.OpenReadStream(20_000_000);
        await _replay.StartFromStreamAsync(stream, new Services.ReplayOptions
        {
            GateOnReply = true,
            ReplyTimeoutMs = 20000,
            RespectUserGaps = false,
            Speed = 1.0
        });
        Log("Import finished");
    }
    
    private void Export() =>
        Nav.NavigateTo($"/export?userId={_userId}", forceLoad: true);

    public void Dispose()
    {
        Chat.OnMessage -= OnIncoming;
        Chat.OnlineChanged -= HandleOnlineChanged;
        _ = _replay?.DisposeAsync();
    }

    private void Log(string msg)
    {
        var line = $"[{DateTime.Now:HH:mm:ss}] {msg}";
        _logs.Add(line);
        const int MAX = 200;
        if (_logs.Count > MAX) _logs.RemoveRange(0, _logs.Count - MAX);
        Console.WriteLine(line);
    }

}

<style>
    body {
        background-color: #111111;
        color: #f0f0f0;
        font-family: Inter, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
    }

    * {
        box-sizing: border-box;
    }

    .file-hidden {
        display: none;
    }

    .chat-wrap {
        max-width: 820px;
        margin: 0 auto;
        padding: 12px 16px 20px;
    }

    .chatbox {
        background: #1c1c1c; 
        border: 1px solid #333; 
        border-radius: 16px;
        height: 60vh;
        min-height: 360px;
        overflow: auto;
        padding: 12px;
    }

    .header {
        background: #202020; 
        color: #fff;
        padding: 10px 14px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 12px;
    }

    .header h1 {
        margin: 0;
        color: #fff;
        font-size: clamp(22px, 3vw, 32px);
        font-weight: 800;
    }

    .status-pill {
        display: inline-block;
        border-radius: 9999px;
        padding: 4px 10px;
        font-weight: 600;
        background: rgba(255, 255, 255, 0.1);
        border: none; 
    }

    .status-pill.online {
        
    }

    .status-pill.offline {
        background: rgba(255, 255, 255, 0.05); 
    }

    h1 {
        text-align: center;
        margin: 12px auto 16px;
        font-size: clamp(28px, 3.6vw, 40px);
        line-height: 1.15;
        font-weight: 800;
        letter-spacing: -0.01em;
        color: #f0f0f0; 
    }


    .row {
        display: flex;
        margin: 8px 0;
    }

    .row.user {
        justify-content: flex-end;
    }

    .row.bot {
        justify-content: flex-start;
    }


    .bubble {
        max-width: min(75%, 560px);
        padding: 10px 12px;
        border-radius: 14px;
        line-height: 1.35;
        color: #f0f0f0; 
        position: relative;
        border: 1px solid #333;
        background: #2a2a2a; 
        box-shadow: none; 
    }

    .row.user .bubble {
        background: #003d7a; 
        border-color: #0052a3;
    }

    /* Timestamp */
    .meta {
        font-size: 12px;
        color: #888; 
        margin-top: 6px;
        text-align: right;
    }

    .inputrow {
        display: flex;
        gap: 8px;
        align-items: center;
        margin-top: 10px;
    }

    .textinput {
        flex: 1;
        height: 42px;
        padding: 0 12px;
        border: 1px solid #444; 
        border-radius: 12px;
        outline: none;
        background: #2a2a2a; 
        color: #f0f0f0; 
    }

    .textinput:focus {
        border-color: #2deba8; 
        box-shadow: 0 0 0 3px rgba(45, 235, 168, 0.25); 
    }

    .btn-send {
        height: 42px;
        padding: 0 16px;
        border: 1px solid #2deba8; 
        background: #2deba8; 
        color: #111; 
        border-radius: 12px;
        cursor: pointer;
        font-weight: 600; 
    }

    .btn-send[disabled] {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .toolbar {
        margin-top: 10px;
        display: flex;
        gap: 8px;
    }

    .btn-secondary {
        display: inline-block;
        padding: 8px 12px;
        border: 1px solid #555; 
        border-radius: 10px;
        text-decoration: none;
        color: #f0f0f0; 
        background: #333; 
        font: 500 14px/1.4 inherit;
        transition: filter .15s ease;
        cursor: pointer;
    }

    .btn-secondary[disabled] {
        pointer-events: none;
        opacity: 0.8;
        cursor: not-allowed;
    }
    

    .logs {
        margin-top: 12px;
    }

    .logs summary {
        cursor: pointer;
        font-weight: 600;
    }

    .logs-body {
        border: 1px solid #333; 
        border-radius: 10px;
        padding: 8px;
        margin-top: 8px;
        max-height: 180px;
        overflow: auto;
        background: #2a2a2a; 
    }

    .log-line {
        font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;
        font-size: 12px;
        color: #ccc; 
    }

    #blazor-error-ui { display: none !important; }
</style>
@page "/"
@implements IDisposable
@inject Services.IChatBackend Chat


<div class="chat-wrap">
    <h1>WaFlow Chat</h1>
    <div class="status-banner @(_online ? "online" : "offline")">
        @(_online ? "Simulator ONLINE" : "Simulator OFFLINE — reconnecting…")
    </div>
    <div class="chatbox">
        @foreach (var m in _feed)
        {
            var isBot = m.Direction == Models.Direction.Outbound;
            <div class="row @(isBot ? "bot" : "user")">
                <div class="bubble">
                    @m.Body
                    <div class="meta">@m.Timestamp.ToLocalTime()</div>
                </div>
            </div>
        }
    </div>

    <div class="inputrow">
        <input
            @bind="_text"
            @bind:event="oninput"
            @onkeydown="HandleKey"
            placeholder="Write a message..."
            class="textinput" />

        <button class="btn-send"
                @onclick="Send"
                disabled="@(!_online || string.IsNullOrWhiteSpace(_text))">
            Send
        </button>
    </div>

    <div class="toolbar">
        <a class="btn-secondary" href="@($"/export?userId={_userId}")">Export (.json)</a>
        <button class="btn-secondary" @onclick="ResetMessages">Reset Messages</button>
        <label for="fileImport" class="btn-secondary">Import (.json)</label>
        <InputFile id="fileImport"
                   class="file-hidden"
                   OnChange="OnImportReplay"
                   accept=".json" />
    </div>

    <div class="logs">
        <div class="logs-header">Logs</div>
        <div class="logs-body">
            @foreach (var line in Enumerable.Reverse(_logs))
            {
                <div class="log-line">@line</div>
            }
        </div>
    </div>
        
</div>

@code{
    private string _text = string.Empty;
    private List<Models.Message> _feed = new();
    private Services.ReplayMessages? _replay;
    private string _userId = "user-001"; // fixed now, should be made dynamic
    private bool _online;
    private readonly List<string> _logs = new();
   
    protected override async Task OnInitializedAsync()
    {
        Chat.OnMessage += OnIncoming;
        Chat.OnlineChanged += HandleOnlineChanged; 
        _online = Chat.IsOnline;
        
        Log("Init UI");
        await Chat.InitializeAsync();
        _feed = Chat.Feed.ToList();
        _replay = new Services.ReplayMessages(Chat);
        Log($"Initial load: {_feed.Count} messages");

    }

    private void HandleOnlineChanged(bool isOnline) 
    {
        Log(isOnline ? "Simulator ONLINE" : "Simulator OFFLINE");
        _online = isOnline;
        InvokeAsync(StateHasChanged);
    }
    
    private async Task Send()
    {
        if (string.IsNullOrWhiteSpace(_text)) return;
        var t = _text;
        _text = string.Empty;
        Log($"Send (user): {t}");
        try
        {
            await Chat.SendFromUserAsync(t);
        }
        catch (Exception ex)
        {
            Log($"Send ERROR: {ex.Message}");
        }
    }
    
    private async Task ResetMessages()
    {
        Log("Reset requested");
        await Chat.ResetAsync();
        _feed.Clear();         
        Log("Reset done (local cleared)");
        StateHasChanged();  
    }

    private void HandleKey(KeyboardEventArgs e)
    {
        if (e.Key is "Enter") _ = Send();
    }

    private void OnIncoming(Models.Message m)
    {
        _feed.Add(m);
        Log($"Recv ({m.Direction}): {m.Body}");
        InvokeAsync(StateHasChanged);
    }
    
    private async Task OnImportReplay(InputFileChangeEventArgs e)
    {
        Log("Import started");
        if (_replay is null) return;
        await using var stream = e.File.OpenReadStream(20_000_000);
        await _replay.StartFromStreamAsync(stream, new Services.ReplayOptions
        {
            GateOnReply = true,        
            ReplyTimeoutMs = 20000,    
            RespectUserGaps = false,   
            Speed = 1.0
        });
        Log("Import finished");
    }


    public void Dispose()
    {
        Chat.OnMessage -= OnIncoming;
        Chat.OnlineChanged -= HandleOnlineChanged;
        _ = _replay?.DisposeAsync();
    } 
    
    private void Log(string msg)
    {
        var line = $"[{DateTime.Now:HH:mm:ss}] {msg}";
        _logs.Add(line);
        const int MAX = 200;
        if (_logs.Count > MAX) _logs.RemoveRange(0, _logs.Count - MAX);
        Console.WriteLine(line); // log a consola también
    }
}

<style>
* { box-sizing: border-box; }

.file-hidden { display: none; }

.chat-wrap {
  max-width: 820px;
  margin: 0 auto;
  padding: 12px 16px 20px;
}

.chatbox {
  background: #f7f7f8;             
  border: 1px solid #e6e6e8;        
  border-radius: 16px;
  height: 60vh;
  min-height: 360px;
  overflow: auto;
  padding: 12px;
}

h1 {
    text-align: center;
    margin: 12px auto 16px;
    font-size: clamp(28px, 3.6vw, 40px);
    line-height: 1.15;
    font-weight: 800;
    letter-spacing: -0.01em;
    color: #1f2328;
}


.row {
  display: flex;
  margin: 8px 0;
}
.row.user { justify-content: flex-end; }
.row.bot  { justify-content: flex-start; }


.bubble {
  max-width: min(75%, 560px);
  padding: 10px 12px;
  border-radius: 14px;
  line-height: 1.35;
  color: #1f2328;                   
  position: relative;
  border: 1px solid #e8e8ee;        
  background: #ffffff;              
  box-shadow: 0 1px 0 rgba(0,0,0,0.03);
}

.row.user .bubble {
  background: #dcf3ff;              
  border-color: #b6e6ff;            
}

/* Timestamp */
.meta {
  font-size: 12px;
  color: #6b7280;                   
  margin-top: 6px;
  text-align: right;
}

/* Input + botón */
.inputrow {
  display: flex;
  gap: 8px;
  align-items: center;
  margin-top: 10px;
}

.textinput {
  flex: 1;
  height: 42px;
  padding: 0 12px;
  border: 1px solid #e6e6e8;        
  border-radius: 12px;
  outline: none;
}
.textinput:focus {
  border-color: #9cc9ff;
  box-shadow: 0 0 0 3px rgba(80, 140, 255, 0.15);
}

.btn-send {
  height: 42px;
  padding: 0 16px;
  border: 1px solid #2563eb;
  background: #2563eb;
  color: #fff;
  border-radius: 12px;
  cursor: pointer;
}
.btn-send[disabled] {
  opacity: 0.5;
  cursor: not-allowed;
}

.toolbar {
  margin-top: 10px;
  display: flex;
  gap: 8px;
}

.btn-secondary {
  display: inline-block;
  padding: 8px 12px;
  border: 1px solid #e6e6e8;        
  border-radius: 10px;
  text-decoration: none;
  color: #1f2328;                   
  background: #fff;
    font-family: inherit;
    font-size: 14px;
    font-weight: 500;
    line-height: 1.4;
}
.btn-secondary:hover {
  background: #fafafa;
    cursor: pointer;
}
</style>